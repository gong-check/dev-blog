{"componentChunkName":"component---src-templates-blog-post-js","path":"/FE/코카콜라/Interactive-landing-page/","result":{"data":{"site":{"siteMetadata":{"title":"공책 팀 개발 블로그"}},"markdownRemark":{"id":"5622dc46-4775-5982-a185-04e87e1ca5e6","excerpt":"안녕하세요. “함께 사용하는 우리의 공간, 우리가 체크하자!”\nGongCheck 팀에서 프론트엔드 개발을 맡고 있는 코카콜라입니다.\n저희 팀은 우아한테크코스 4기 과정에서 공간관리 백 오피스를 개발하고 있습니다. GongCheck…","html":"<p>안녕하세요. “함께 사용하는 우리의 공간, 우리가 체크하자!”</br>\nGongCheck 팀에서 프론트엔드 개발을 맡고 있는 코카콜라입니다.</br>\n저희 팀은 우아한테크코스 4기 과정에서 공간관리 백 오피스를 개발하고 있습니다.</p>\n<p>GongCheck 서비스를 운영하면서 처음 접하는 사용자에게 서비스에 대한 정보와 안내가 필요하다는 생각이 들었습니다. 그렇다면 어떤 방식으로 서비스에 대한 정보를 제공할까? 라는 생각을 하던 중 랜딩 페이지를 구현하게 되었는데요. 이번 포스팅에서는 인터랙티브 랜딩 페이지 개발 과정을 공유하고자 합니다.</p>\n<h3>목차</h3>\n<ol>\n<li>랜딩 페이지</li>\n<li>서비스의 정체성을 첫 화면에 보여주자 - Canvas API</li>\n<li>스크롤 위치에 따라 애니메이션 효과 적용 - Intersection Observer API</li>\n<li>마치면서</li>\n<li>참고</li>\n</ol>\n<hr>\n<h1>1. 랜딩 페이지</h1>\n<p>위키백과에서는 랜딩 페이지(landing page)를 다음과 같이 설명하고 있습니다.\n검색 엔진, 광고 등을 경유하여 접속하는 이용자가 최초로 보게 되는 웹페이지이다. 링크를 클릭하고 해당 웹페이지에 접속하면 마케터가 의도한 행위를 하도록 하는 페이지를 의미한다.</p>\n<p>저희 팀이 구현할 랜딩 페이지는 GongCheck 서비스를 처음 접하는 사용자에게 우리의 서비스를 소개하기 위한 간략한 페이지라는 정의를 내렸고 구현 목록은 다음과 같습니다.</p>\n<ol>\n<li>첫 화면은 서비스의 정체성을 나타내는 GongCheck 로고</li>\n<li>공간을 사용하고 체크리스트를 작성하는 사용자에게 제공하는 서비스 사용법과 정보</li>\n<li>공간을 관리하고 생성하는 관리자 사용자에게 제공하는 서비스 정보</li>\n<li>인터랙티브 웹 사이트</li>\n</ol>\n<p>구현된 랜딩 페이지는 아래 영상과 같습니다.</p>\n<div align=\"center\">\n    <style>\n    .responsive-gif {\n        max-width: 630px\n    }\n    @media (max-width: 400px) {\n        .responsive-gif {\n            max-width: 360px\n        }\n    }\n    @media (max-width: 300px) {\n        .responsive-gif {\n            max-width: 300px\n        }\n    }\n    .responsive-gif {\n        padding: 10px;\n    }\n    </style>\n    <img src=\"/dev-blog/446269568b794e8964066c5208983f4c/landing.gif\" class=\"responsive-gif\">\n    <p>(GongCheck 서비스는 다양한 사용자의 디바이스 환경에<br> 대응하기 위해 반응형이 적용되어 있습니다.)</p>\n</div>\n<br>\n<hr>\n<h1>2. 서비스의 정체성을 첫 화면에 보여주자 - Canvas API</h1>\n<p>사용자가 웹 사이트에 처음 접속하게 되면 보여줄 Hero Section은 서비스의 정체성을 담은 GongCheck 로고를 보여주도록 했습니다.</p>\n<h2>2-1. 개발 초기</h2>\n<p>처음에는 화면 가운데에 로고만 덩그러니 배치되어 있었지만 심플한 느낌이 들어 로고에 애니메이션을 줘서 흐느적? 거리는 재미난 요소를 연출했습니다. 하지만 좀 더 로고에 집중시킬 수 있는 방법이 있지 않을까? 라는 생각이 들었습니다.</p>\n<h2>2-2. 화면에 몰입감 주기!</h2>\n<p>로고에 집중시켜 몰입감을 주기 위한 연출로 “조명을 비춘다?”라는 아이디어가 생각났습니다. 조명이 마우스에 따라 움직이면 더 생동감이 있고 스크롤을 내리면 조명이 커져 화면에 동적인 효과를 줄 수 있지 않을까? 라는 생각으로 구현하게 되었습니다.</p>\n<p>정리하면 구현 요구사항은 다음과 같습니다.</p>\n<ul>\n<li>로고를 비추는 조명 느낌의 연출</li>\n<li>조명이 마우스를 따라 움직이기</li>\n<li>스크롤을 내리면 조명이 커지기</li>\n<li>스크롤 움직임에 영향을 받지 않고 화면 정중앙에 위치하는 로고 이미지</li>\n</ul>\n<div align=\"center\">\n    <style>\n    .responsive-gif {\n        max-width: 630px\n    }\n    @media (max-width: 400px) {\n        .responsive-gif {\n            max-width: 360px\n        }\n    }\n    @media (max-width: 300px) {\n        .responsive-gif {\n            max-width: 300px\n        }\n    }\n    .responsive-gif {\n        padding: 10px;\n    }\n    </style>\n    <img src=\"/dev-blog/ed873f2cb8994a30ff09b11bc1a2faf9/logo.gif\" class=\"responsive-gif\">\n</div>\n<br>\n<h2>2-3. 구현 - Canvas API</h2>\n<p>조명을 연출하기 위해 Canvas API를 활용했습니다. Canvas API는 2D 그래픽을 화면에 그리기 위해 사용되는 Web API입니다. HTML <code class=\"language-text\">&lt;canvas></code> 요소와 JavaScript로 2D 그래픽을 그릴 수 있는 도구들을 제공합니다.</p>\n<p>화면에 그려질 조명 요소를 createCanvas로 구현합니다. 여기서 조명의 흰 부분과 조명 이외의 어두운 배경은 CanvasRenderingContext2D.clip() 메서드로 구현하면 됩니다. 마우스의 위치에 따라 조명을 움직이게 하기 위해 onMouseMove 핸들러 함수를 통해 마우스 위치를 createCanvas함수의 인자로 전달해주면 됩니다.</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/clip\">CanvasRenderingContext2D.clip()</a></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// useHeroSection 코드 일부분</span>\n<span class=\"token keyword\">import</span> useScroll <span class=\"token keyword\">from</span> <span class=\"token string\">'@/hooks/useScroll'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useHeroSection</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> canvasRef <span class=\"token operator\">=</span> useRef<span class=\"token operator\">&lt;</span>HTMLCanvasElement<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> scrollPosition <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useScroll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\n\t<span class=\"token keyword\">const</span> scrollPositionInt <span class=\"token operator\">=</span> scrollPosition <span class=\"token operator\">+</span> <span class=\"token constant\">SCROLL_INTERVAL</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createCanvas</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n\t    <span class=\"token parameter\"><span class=\"token literal-property property\">canvas</span><span class=\"token operator\">:</span> HTMLCanvasElement<span class=\"token punctuation\">,</span>\n\t    <span class=\"token literal-property property\">ctx</span><span class=\"token operator\">:</span> CanvasRenderingContext2D<span class=\"token punctuation\">,</span>\n\t    <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span>\n\t    <span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span>\n\t    <span class=\"token literal-property property\">radius</span><span class=\"token operator\">:</span> number</span>\n\t  <span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t    <span class=\"token keyword\">const</span> scale <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>devicePixelRatio<span class=\"token punctuation\">;</span>\n\t    canvas<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>innerWidth <span class=\"token operator\">*</span> scale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t    canvas<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>innerHeight <span class=\"token operator\">*</span> scale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">scale</span><span class=\"token punctuation\">(</span>scale<span class=\"token punctuation\">,</span> scale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">beginPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t    <span class=\"token keyword\">let</span> circlePath <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Path2D</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t    circlePath<span class=\"token punctuation\">.</span><span class=\"token function\">arc</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> radius<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t    circlePath<span class=\"token punctuation\">.</span><span class=\"token function\">rect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> window<span class=\"token punctuation\">.</span>innerWidth<span class=\"token punctuation\">,</span> window<span class=\"token punctuation\">.</span>innerHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">clip</span><span class=\"token punctuation\">(</span>circlePath<span class=\"token punctuation\">,</span> <span class=\"token string\">'evenodd'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 조명 만들기</span>\n\t    ctx<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> <span class=\"token string\">'#000000'</span><span class=\"token punctuation\">;</span>\n\t    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">fillRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">closePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onMouseMove</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">e</span><span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>MouseEvent<span class=\"token operator\">&lt;</span>HTMLElement<span class=\"token punctuation\">,</span> MouseEvent<span class=\"token operator\">></span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">const</span> canvas <span class=\"token operator\">=</span> canvasRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> ctx <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>nativeEvent<span class=\"token punctuation\">.</span>offsetX<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> y <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>nativeEvent<span class=\"token punctuation\">.</span>offsetY<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">const</span> radius <span class=\"token operator\">=</span> <span class=\"token constant\">CIRCLE_SIZE</span> <span class=\"token operator\">*</span> scrollPositionInt<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token function\">createCanvas</span><span class=\"token punctuation\">(</span>canvas<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> radius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> onMouseMove<span class=\"token punctuation\">,</span> canvasRef <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>마우스의 위치를 알기 위해서 section 요소의 onMouseMove 이벤트 속성을 사용하고 canvas 요소의 ref 속성에 canvasRef를 사용하여 구현합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// HeroSection 코드 일부분</span>\n<span class=\"token keyword\">const</span> <span class=\"token literal-property property\">HeroSection</span><span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">FC</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> onMouseMove<span class=\"token punctuation\">,</span> canvasRef <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useHeroSection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>section onMouseMove<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onMouseMove<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div css<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token comment\">/*img 스타일*/</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>img src<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>logo<span class=\"token punctuation\">}</span> alt<span class=\"token operator\">=</span><span class=\"token string\">\"logo\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span>아래로 내려주세요<span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>canvas css<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token comment\">/*cavas 스타일*/</span><span class=\"token punctuation\">}</span> ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>canvasRef<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>canvas<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>section<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API\">Canvas_API</a></li>\n<li><a href=\"https://www.awebco.com/blog/hero-section/\">Hero Section 이란?</a></li>\n</ul>\n<hr>\n<h1>3. 스크롤 위치에 따라 애니메이션 효과 적용 - Intersection Observer API</h1>\n<p>랜딩 페이지를 보시면 스크롤 위치에 따라 애니메이션 효과가 적용된 것을 볼 수 있습니다. 초기 개발 단계에서는 단순히 스크롤 위치에 따라 각각의 Section에서 스크롤의 위치에 따라 애니메이션을 실행시켰습니다. 예를 들어 <code class=\"language-text\">HeroSection에서는 0~80</code> 스크롤 값을 사용하고 <code class=\"language-text\">UserViewSection1에서는 80~160</code>을 사용하는 식으로 하드코딩으로 구현이 되어 있었는데요.</p>\n<p>왜 이렇게 하드코딩을 했냐고 질문을 하신다면…4차 데모 데이 전날에 랜딩 페이지를 기획하고 개발했습니다. <strong>단 하루 만에 구현을 하다 보니</strong>…하하하 레거시를 만들어 냈네요.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> useScroll <span class=\"token keyword\">from</span> <span class=\"token string\">'@/hooks/useScroll'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token literal-property property\">Landing</span><span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">FC</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>HeroSection <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>ViewSection1 <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>ViewSection2 <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>ViewSection3 <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>ViewSection4 <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>ViewSection5 <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token literal-property property\">HeroSection</span><span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">FC</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> scrollPosition <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useScroll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 스크롤 위치 값</span>\n\t<span class=\"token comment\">// scrollPosition 값으로 애니메이션 제어</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token literal-property property\">ViewSection1</span><span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">FC</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> scrollPosition <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useScroll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// scrollPosition 값으로 애니메이션 제어</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>3-1. Refactoring 방향성</h2>\n<p>전체 페이지의 스크롤 위치 값으로 각각의 Section의 애니메이션을 동작시키다 보니 리팩토링 과정에서 다음과 같은 문제점을 발견했습니다.</p>\n<ul>\n<li>각각의 Section 높이 값을 변경할 수 없다.</li>\n<li>Section의 순서를 변경할 수 없다.</li>\n<li>각각의 Section의 높이, Section의 순서를 변경하게 되면 모든 Section의 스크롤 위치 값에 대한 애니메이션 구현 로직을 수정해야 한다.</li>\n</ul>\n<p>페이지의 스크롤 위치 값에 의존적인 현재 상황을 개선하기 위해 각각의 Section이 독립적으로 스크롤 값을 가질 수 있게 리팩토링하기로 방향을 잡았고 요구사항을 정리하면 다음과 같습니다.</p>\n<ul>\n<li>페이지의 스크롤을 움직일 때, 각각의 Section이 화면에 노출되는 시점과 화면에서 사라지는 시점을 알 수 있어야 한다.</li>\n<li>Section은 각자의 독립된 영역으로 분리되어야 한다.\n<ul>\n<li>독립된 영역은 스크롤 움직임에 대해 자신이 노출된 비율을 퍼센티지로 환산할 수 있어야 한다.</li>\n<li>퍼센티지로 계산된 상태값으로 애니메이션을 동작시켜야 한다.</li>\n</ul>\n</li>\n</ul>\n<h2>3-2. 화면에 노출되고 사라지는 시점 구하기</h2>\n<p>Intersection Observer API를 활용해 요소가 화면에 노출되고 사라지는 시점을 구했습니다. Intersection Observer API는 타겟 요소와 상위 혹은 최상위 요소와의 교차점을 관찰하여 교차되는지 아닌지를 구별하는 기능을 가지고 있습니다.</p>\n<p>MDN에 따르면 다음과 같은 상황에 Intersection Observer API가 필요하다고 합니다.</p>\n<ul>\n<li>페이지가 스크롤 되는 도중에 발생하는 이미지나 다른 컨텐츠의 지연 로딩.</li>\n<li>스크롤 시에, 더 많은 컨텐츠가 로드 및 렌더링되어 사용자가 페이지를 이동하지 않아도 되게 하는 infinite-scroll 을 구현.</li>\n<li>광고 수익을 계산하기 위한 용도로 광고의 가시성 보고.</li>\n<li>사용자에게 결과가 표시되는 여부에 따라 작업이나 애니메이션을 수행할 지 여부를 결정.</li>\n</ul>\n<p>Intersection Observer API를 활용해 타겟요소의 교차 시점을 isLoaded 값으로 판별할 수 있는 useIntersectionObserver hook을 구현했습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> useIntersectionObserver <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Element</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">targetRef</span><span class=\"token operator\">:</span> RefObject<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">threshold</span><span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> <span class=\"token number\">0</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> observerRef <span class=\"token operator\">=</span> useRef<span class=\"token operator\">&lt;</span>IntersectionObserver<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isLoaded<span class=\"token punctuation\">,</span> setIsLoaded<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">intersectionCallBack</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">entries</span><span class=\"token operator\">:</span> IntersectionObserverEntry<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">io</span><span class=\"token operator\">:</span> IntersectionObserver</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    entries<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entry</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span>isIntersecting<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setIsLoaded</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token comment\">// 타겟 요소가 화면에 보이는 지 체크</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>observerRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      observerRef<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntersectionObserver</span><span class=\"token punctuation\">(</span>intersectionCallBack<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        threshold<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 타겟 요소의 가시성 퍼센티지를 나타내는 속성</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    targetRef<span class=\"token punctuation\">.</span>current <span class=\"token operator\">&amp;&amp;</span> observerRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>targetRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      observerRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">disconnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">// 해당 요소가 언마운트 시 disconnect</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>targetRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> isLoaded <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><a href=\"https://developer.mozilla.org/ko/docs/Web/API/Intersection_Observer_API\">Intersection_Observer_API</a></li>\n</ul>\n<h2>3-3. 독립된 영역으로 분리되어 스크롤 값 가지기</h2>\n<p>독립된 영역의 스크롤 값을 구하기 위해 useOnContainerScroll hook을 구현했습니다. useOnContainerScroll hook은 매개변수로 타겟 요소(container)와 스크롤 움직임에 따라 애니메이션을 실행시킬 onScroll을 받습니다. 아래의 코드를 좀 더 살펴보면 useIntersectionObserver hook으로 타켓 요소의 가시성을 판단하여 타겟 요소의 스크롤 값을 구할 onRunScroll 함수를 호출합니다.</p>\n<p>onRunScroll 함수는 타켓 요소의 스크롤 값을 구하는 것뿐만 아니라 애니메이션을 동작시킬 함수로 화면의 렌더링에 영향을 미치기 때문에 requestAnimationFrame으로 비동기를 처리했습니다.</p>\n<p>requestAnimationFrame 메서드는 브라우저 화면을 렌더링하는 리페인트 이전에 인자로 받은 콜백함수를 디스플레이 주사율에 맞춰 호출하기 때문에 애니메이션을 업데이트할 때 성능적으로 우수합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> useIntersectionObserver <span class=\"token keyword\">from</span> <span class=\"token string\">'./useIntersectionObserver'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useOnContainerScroll</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>container<span class=\"token operator\">:</span> RefObject<span class=\"token operator\">&lt;</span>HTMLElement<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">onScroll</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> isLoaded <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> useIntersectionObserver<span class=\"token operator\">&lt;</span>HTMLElement<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> dimension <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">top</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">scrollHeight</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">windowHeight</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">scrollInfo</span><span class=\"token operator\">:</span> ScrollInfo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">scrollY</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">progress</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> buffer <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> isRunning <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> latestRequestedTime <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onRunScroll</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    latestRequestedTime <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isRunning<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    isRunning <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">play</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> now <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> buffer<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> scrolledY <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>pageYOffset <span class=\"token operator\">+</span> window<span class=\"token punctuation\">.</span>innerHeight<span class=\"token punctuation\">;</span>\n        scrollInfo<span class=\"token punctuation\">.</span>scrollY <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>scrolledY <span class=\"token operator\">-</span> dimension<span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        scrollInfo<span class=\"token punctuation\">.</span>progress <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>scrollInfo<span class=\"token punctuation\">.</span>scrollY <span class=\"token operator\">/</span> dimension<span class=\"token punctuation\">.</span>scrollHeight<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">onScroll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>now <span class=\"token operator\">&lt;</span> latestRequestedTime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          isRunning <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setDimension</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// 현재 container의 수치로 dimension의 값을 할당 함</span>\n\t\tdimension<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> container<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span>clientWidth<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isLoaded<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'scroll'</span><span class=\"token punctuation\">,</span> onRunScroll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resize'</span><span class=\"token punctuation\">,</span> setDimension<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">setDimension</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      window<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'scroll'</span><span class=\"token punctuation\">,</span> onRunScroll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      window<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resize'</span><span class=\"token punctuation\">,</span> setDimension<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>isLoaded<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> dimension<span class=\"token punctuation\">,</span> scrollInfo <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이제 useOnContainerScroll hook으로 각각의 Section 영역의 스크롤 값을 progress로 구할 수 있습니다. progress 값으로 애니메이션을 작동시키면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> useOnContainerScroll <span class=\"token keyword\">from</span> <span class=\"token string\">'@/hooks/useOnContainerScroll'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ViewSection1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> sectionRef <span class=\"token operator\">=</span> useRef<span class=\"token operator\">&lt;</span>HTMLDivElement<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> dimension<span class=\"token punctuation\">,</span> scrollInfo <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useOnContainerScroll</span><span class=\"token punctuation\">(</span>sectionRef<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> progress <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> scrollInfo<span class=\"token punctuation\">.</span>scrollY <span class=\"token operator\">/</span> dimension<span class=\"token punctuation\">.</span>windowHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// progress 값으로 애니메이션으로 실행 시키면 됩니다.</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>progress <span class=\"token operator\">></span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>progress <span class=\"token operator\">></span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<h1>4. 마치면서</h1>\n<p>4차 데모데이 전날 단 하루 만에 랜딩 페이지를 기획하고 개발했었는데 프론트엔드 개발자로서 재밌었던 경험이었습니다.(그 후에 수많은 리팩토링을 했던 건 비밀…)</p>\n<p>항상 다른 사이트의 랜딩 페이지를 볼 때마다 우와.. 했었지만 우리가 직접 만들어 보니 쉽지 않은 작업이구나! 라는 생각이 들었네요 ㅎㅎ 프론트엔드 개발자 분들이 이글을 보고 계신다면 여러분의 랜딩 페이지를 한번 만들어 보시는 건 어떨까요? 매우 재미있는 추억이 되실거 같아요.</p>\n<p>공책팀의 랜딩 페이지를 구경 하고싶으시다면 <a href=\"https://gongcheck.day/\">공책 사이트</a>에서 확인 하실 수 있습니다.</p>\n<hr>\n<h1>5. 참고</h1>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/clip\">CanvasRenderingContext2D.clip()</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API\">Canvas_API</a></li>\n<li><a href=\"https://www.awebco.com/blog/hero-section/\">Hero Section 이란?</a></li>\n<li><a href=\"https://developer.mozilla.org/ko/docs/Web/API/Intersection_Observer_API\">Intersection_Observer_API</a></li>\n</ul>","fields":{"slug":"/FE/코카콜라/Interactive-landing-page/"},"frontmatter":{"title":"공책 팀의 인터랙티브 랜딩 페이지","date":"2022.10.18","description":"데모 데이 전날 하루 만에 구현했던 랜딩 페이지!!!","tags":["frontend","UX/UI","사용자 경험","랜딩 페이지","인터랙티브"]}}},"pageContext":{"id":"5622dc46-4775-5982-a185-04e87e1ca5e6","previousPostId":"70417758-545e-518c-9cf1-5bb8c7cfbcdd","nextPostId":null}},"staticQueryHashes":["2841359383"]}